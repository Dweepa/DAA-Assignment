{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue153;\red250\green250\blue250;\red38\green38\blue38;
\red21\green158\blue3;\red154\green154\blue154;\red17\green137\blue135;\red20\green155\blue154;\red157\green0\blue172;
\red0\green0\blue0;\red28\green0\blue207;\red196\green26\blue22;\red0\green116\blue0;\red88\green209\blue235;
\red29\green30\blue26;\red197\green197\blue197;\red246\green246\blue239;\red244\green0\blue95;\red157\green101\blue255;
\red224\green213\blue97;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c66667;\cssrgb\c98431\c98431\c98431;\cssrgb\c20000\c20000\c20000;
\cssrgb\c0\c66667\c0;\cssrgb\c66667\c66667\c66667;\cssrgb\c0\c60000\c60000;\cssrgb\c0\c66667\c66667;\csgenericrgb\c61741\c0\c67387;
\csgenericrgb\c0\c0\c0;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c0\c45600\c0;\cssrgb\c40000\c85098\c93725;
\cssrgb\c15294\c15686\c13333;\cssrgb\c81569\c81569\c81569;\cssrgb\c97255\c97255\c94902;\cssrgb\c97647\c14902\c44706;\cssrgb\c68235\c50588\c100000;
\cssrgb\c90196\c85882\c45490;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh14580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 https://gist.github.com/higuaro/bef613526fa3651ee2ef8ef874179f39\
\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
def\cf4  \cf5 karatsuba\cf4 (x,y):\
\
      
\f2\i \cf6 #base case
\f1\i0 \cf4 \
      \cf2 if\cf4  x < \cf7 10\cf4  \cf2 and\cf4  y < \cf7 10\cf4 : 
\f2\i \cf6 # in other words, if x and y are single digits
\f1\i0 \cf4 \
        \cf2 return\cf4  x*y\
\
       n = \cf8 max\cf4 (\cf8 len\cf4 (\cf8 str\cf4 (x)), \cf8 len\cf4 (\cf8 str\cf4 (y)))\
       m = \cf8 int\cf4 (ceil(\cf8 float\cf4 (n)/\cf7 2\cf4 ))   
\f2\i \cf6 #Cast n into a float because n might lie outside the representable range of integers.
\f1\i0 \cf4 \
\
       x_H  = \cf8 int\cf4 (floor(x / \cf7 10\cf4 **m))\
       x_L = \cf8 int\cf4 (x % (\cf7 10\cf4 **m))\
\
       y_H = \cf8 int\cf4 (floor(y / \cf7 10\cf4 **m))\
       y_L = \cf8 int\cf4 (y % (\cf7 10\cf4 **m))\
\
    
\f2\i \cf6 #recursive steps
\f1\i0 \cf4 \
       a = karatsuba(x_H,y_H)\
       d = karatsuba(x_L,y_L)\
       e = karatsuba(x_H + x_L, y_H + y_L) -a -d\
\
       \cf2 return\cf4  \cf8 int\cf4 (a*(\cf7 10\cf4 **(m*\cf7 2\cf4 )) + e*(\cf7 10\cf4 **m) + d)\
\
\cf2 return\cf4  \cf8 int\cf4 (p0*(\cf7 10\cf4 **(half*\cf7 2\cf4 )) + p3*(\cf7 10\cf4 **half) + p1)\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\fs36 \cf9 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 void\cf10 * intal_multiply1(\cf9 void\cf10 * intal1, \cf9 void\cf10 * intal2)\
\{\
    \cf9 char\cf10 * num1 = intal2str(intal1);\
    \cf9 char\cf10 * num2 = intal2str(intal2);\
    \cf9 int\cf10  n1 = strlen(num1);\
    \cf9 int\cf10  n2 = strlen(num2);\
    \cf9 if\cf10  (n1 == \cf11 0\cf10  || n2 == \cf11 0\cf10 )\
        \cf9 return\cf10  \cf12 "0"\cf10 ;\
    \
    \cf13 // will keep the result number in vector\cf10 \
    \cf13 // in reverse order\cf10 \
    vector<\cf9 int\cf10 > result(n1 + n2, \cf11 0\cf10 );\
    \
    \cf13 // Below two indexes are used to find positions\cf10 \
    \cf13 // in result.\cf10 \
    \cf9 int\cf10  i_n1 = \cf11 0\cf10 ;\
    \cf9 int\cf10  i_n2 = \cf11 0\cf10 ;\
    \
    \cf13 // Go from right to left in num1\cf10 \
    \cf9 for\cf10  (\cf9 int\cf10  i=n1-\cf11 1\cf10 ; i>=\cf11 0\cf10 ; i--)\
    \{\
        \cf9 int\cf10  carry = \cf11 0\cf10 ;\
        \cf9 int\cf10  n1 = num1[i] - \cf11 '0'\cf10 ;\
        \
        \cf13 // To shift position to left after every\cf10 \
        \cf13 // multiplication of a digit in num2\cf10 \
        i_n2 = \cf11 0\cf10 ;\
        \
        \cf13 // Go from right to left in num2\cf10 \
        \cf9 for\cf10  (\cf9 int\cf10  j=n2-\cf11 1\cf10 ; j>=\cf11 0\cf10 ; j--)\
        \{\
            \cf13 // Take current digit of second number\cf10 \
            \cf9 int\cf10  n2 = num2[j] - \cf11 '0'\cf10 ;\
            \
            \cf13 // Multiply with current digit of first number\cf10 \
            \cf13 // and add result to previously stored result\cf10 \
            \cf13 // at current position.\cf10 \
            \cf9 int\cf10  sum = n1*n2 + result[i_n1 + i_n2] + carry;\
            \
            \cf13 // Carry for next iteration\cf10 \
            carry = sum/\cf11 10\cf10 ;\
            \
            \cf13 // Store result\cf10 \
            result[i_n1 + i_n2] = sum % \cf11 10\cf10 ;\
            \
            i_n2++;\
        \}\
        \
        \cf13 // store carry in next cell\cf10 \
        \cf9 if\cf10  (carry > \cf11 0\cf10 )\
            result[i_n1 + i_n2] += carry;\
        \
        \cf13 // To shift position to left after every\cf10 \
        \cf13 // multiplication of a digit in num1.\cf10 \
        i_n1++;\
    \}\
    \
    \cf13 // ignore '0's from the right\cf10 \
    \cf9 int\cf10  i = result.size() - \cf11 1\cf10 ;\
    \cf9 while\cf10  (i>=\cf11 0\cf10  && result[i] == \cf11 0\cf10 )\
        i--;\
    \
    \cf13 // If all were '0's - means either both or\cf10 \
    \cf13 // one of num1 or num2 were '0'\cf10 \
    \cf9 if\cf10  (i == -\cf11 1\cf10 )\
        \cf9 return\cf10  \cf12 "0"\cf10 ;\
    \
    \cf13 // generate the result string\cf10 \
    string s = \cf12 ""\cf10 ;\
    \cf9 while\cf10  (i >= \cf11 0\cf10 )\
        s += std::to_string(result[i--]);\
    \
    \cf9 return\cf10  s;\
\}\
\{\
    \cf9 int\cf10  i, j;\
    \cf9 char\cf10  c;\
    \
    \cf9 for\cf10  (i = \cf11 0\cf10 , j = strlen(s)-\cf11 1\cf10 ; i<j; i++, j--)\
    \{\
        c = s[i];\
        s[i] = s[j];\
        s[j] = c;\
    \}\
\}
\fs28 \cf4 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf4 \
\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf14 \cb15 int\cf16  \cf17 length\cf16  \cf18 =\cf16  \cf17 max(lhs.size(),\cf16  \cf17 rhs.size());\cf16 \
    \
    \cf14 while\cf16  \cf17 (lhs.size()\cf16  \cf18 <\cf16  \cf17 length)\cf16  \
      \cf17 lhs.insert(\cf19 0\cf17 ,\cf20 "0"\cf17 );\cf16 \
\
    \cf14 while\cf16  \cf17 (rhs.size()\cf16  \cf18 <\cf16  \cf17 length)\cf16  \
      \cf17 rhs.insert(\cf19 0\cf17 ,\cf20 "0"\cf17 );\cf16 \
\
    \cf14 if\cf16  \cf17 (length\cf16  \cf18 ==\cf16  \cf19 1\cf17 )\cf16 \
        \cf14 return\cf16  \cf17 to_string((lhs[\cf19 0\cf17 ]\cf18 -\cf20 '0'\cf17 )\cf18 *\cf17 (rhs[\cf19 0\cf17 ]\cf18 -\cf20 '0'\cf17 ));\cf16 \
\
    \cf17 string\cf16  \cf17 lhs0\cf16  \cf18 =\cf16  \cf17 lhs.substr(\cf19 0\cf17 ,length\cf18 /\cf19 2\cf17 );\cf16 \
    \cf17 string\cf16  \cf17 lhs1\cf16  \cf18 =\cf16  \cf17 lhs.substr(length\cf18 /\cf19 2\cf17 ,length\cf18 -\cf17 length\cf18 /\cf19 2\cf17 );\cf16 \
    \cf17 string\cf16  \cf17 rhs0\cf16  \cf18 =\cf16  \cf17 rhs.substr(\cf19 0\cf17 ,length\cf18 /\cf19 2\cf17 );\cf16 \
    \cf17 string\cf16  \cf17 rhs1\cf16  \cf18 =\cf16  \cf17 rhs.substr(length\cf18 /\cf19 2\cf17 ,length\cf18 -\cf17 length\cf18 /\cf19 2\cf17 );\cf16 \
    \
    \cf17 string\cf16  \cf17 p0\cf16  \cf18 =\cf16  \cf17 multiply(lhs0,rhs0);\cf16 \
    \cf17 string\cf16  \cf17 p1\cf16  \cf18 =\cf16  \cf17 multiply(lhs1,rhs1);\cf16 \
    \cf17 string\cf16  \cf17 p2\cf16  \cf18 =\cf16  \cf17 multiply(add(lhs0,lhs1),add(rhs0,rhs1));\cf16 \
    \cf17 string\cf16  \cf17 p3\cf16  \cf18 =\cf16  \cf17 subtract(p2,add(p0,p1));\cf16 \
\
    \cf14 for\cf16  \cf17 (\cf14 int\cf16  \cf17 i\cf16  \cf18 =\cf16  \cf19 0\cf17 ;\cf16  \cf17 i\cf16  \cf18 <\cf16  \cf19 2\cf18 *\cf17 (length\cf18 -\cf17 length\cf18 /\cf19 2\cf17 );\cf16  \cf17 i\cf18 ++\cf17 )\cf16 \
        \cf17 p0.append(\cf20 "0"\cf17 );\cf16 \
    \cf14 for\cf16  \cf17 (\cf14 int\cf16  \cf17 i\cf16  \cf18 =\cf16  \cf19 0\cf17 ;\cf16  \cf17 i\cf16  \cf18 <\cf16  \cf17 length\cf18 -\cf17 length\cf18 /\cf19 2\cf17 ;\cf16  \cf17 i\cf18 ++\cf17 )\cf16 \
        \cf17 p3.append(\cf20 "0"\cf17 );\cf16 \
        \
    \cf17 string\cf16  \cf17 result\cf16  \cf18 =\cf16  \cf17 add(add(p0,p1),p3);\cf16 \
\
    \cf14 return\cf16  \cf17 result.erase(\cf19 0\cf17 ,\cf16  \cf17 min(result.find_first_not_of(\cf20 '0'\cf17 ),\cf16  \cf17 result.size()\cf18 -\cf19 1\cf17 ));}